//Dev-CPP code
#include <windows.h>
#include <gl/gl.h>

// Function Declarations
LRESULT CALLBACK WndProc (HWND hWnd, UINT message,
WPARAM wParam, LPARAM lParam);
void EnableOpenGL (HWND hWnd, HDC *hDC, HGLRC *hRC);
void DisableOpenGL (HWND hWnd, HDC hDC, HGLRC hRC);

//WinMain
int WINAPI WinMain (HINSTANCE hInstance,
                    HINSTANCE hPrevInstance,
                    LPSTR lpCmdLine,
                    int iCmdShow)
{
    WNDCLASS wc;
    HWND hWnd;
    HDC hDC;
    HGLRC hRC;        
    MSG msg;
    BOOL bQuit = FALSE;
    float theta = 0.0f;

    // register window class
    wc.style = CS_OWNDC;
    wc.lpfnWndProc = WndProc;
    wc.cbClsExtra = 0;
    wc.cbWndExtra = 0;
    wc.hInstance = hInstance;
    wc.hIcon = LoadIcon (NULL, IDI_APPLICATION);
    wc.hCursor = LoadCursor (NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH) GetStockObject (BLACK_BRUSH);
    wc.lpszMenuName = NULL;
    wc.lpszClassName = "GLSample";
    RegisterClass (&wc);

    //create main window
    hWnd = CreateWindow (
      "GLSample", "OpenGL Sample", 
      WS_CAPTION | WS_POPUPWINDOW | WS_VISIBLE,
      700, 300, 512, 512,
      NULL, NULL, hInstance, NULL);

    // enable OpenGL for the window
    EnableOpenGL (hWnd, &hDC, &hRC);

    //program main loop
    while (!bQuit)
    {
        // check for messages
        if (PeekMessage (&msg, NULL, 0, 0, PM_REMOVE))
        {
            //handle or dispatch messages
            if (msg.message == WM_QUIT)
            {
                bQuit = TRUE;
            }
            else
            {
                TranslateMessage (&msg);
                DispatchMessage (&msg);
            }
        }
        else
        {
            //OpenGL animation code goes here

glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // 깊이 버퍼를 추가로 클리어합니다.

glEnable(GL_DEPTH_TEST); // 깊이 테스트를 활성화합니다.

glPushMatrix(); // 현재 행렬 상태를 저장합니다.

// 별을 회전시킵니다.
glRotatef(theta, 1.0f, 1.0f, 1.0f); // X, Y, Z 축을 중심으로 회전시킵니다.

// 별을 그립니다.
glBegin(GL_TRIANGLES);

// 별의 정점 정의 (예시 좌표)
GLfloat vertices[][3] = {
    { 0.0f,  0.5f,  0.0f}, // 꼭짓점 0
    { 0.14f,  0.1f,  0.0f}, // 꼭짓점 1
    { 0.47f,  0.15f,  0.0f}, // 꼭짓점 2
    { 0.23f, -0.05f,  0.0f}, // 꼭짓점 3
    { 0.29f, -0.4f,  0.0f}, // 꼭짓점 4
    { 0.0f, -0.2f,  0.0f}, // 꼭짓점 5
    {-0.29f, -0.4f,  0.0f}, // 꼭짓점 6
    {-0.23f, -0.05f,  0.0f}, // 꼭짓점 7
    {-0.47f,  0.15f,  0.0f}, // 꼭짓점 8
    {-0.14f,  0.1f,  0.0f}, // 꼭짓점 9
    { 0.0f,  0.0f,  0.15f}, // 꼭짓점 10 (앞쪽 중심)
    { 0.0f,  0.0f, -0.15f}  // 꼭짓점 11 (뒤쪽 중심)
};

// 삼각형 그리기 (앞쪽 면)
for (int i = 0; i < 10; ++i) {
    glColor3f(i/10.0, 1.0 - i/10.0, (i%2)/2.0); // 꼭짓점마다 다른 색상 설정
    glVertex3fv(vertices[i]);
    glVertex3fv(vertices[(i + 1) % 10]);
    glVertex3fv(vertices[10]);
}

// 삼각형 그리기 (뒤쪽 면)
for (int i = 0; i < 10; ++i) {
    glColor3f(1.0 - i/10.0, (i%2)/2.0, i/10.0); // 꼭짓점마다 다른 색상 설정
    glVertex3fv(vertices[i]);
    glVertex3fv(vertices[(i + 1) % 10]);
    glVertex3fv(vertices[11]);
}

glEnd();

glPopMatrix(); // 행렬 상태를 복원합니다.
SwapBuffers(hDC);

theta += 1.0f; // 회전 각도를 증가시킵니다.
Sleep(1);
        }
    }

    // shutdown OpenGL
    DisableOpenGL (hWnd, hDC, hRC);

    // destroy the window explicitly
    DestroyWindow (hWnd);

    return msg.wParam;
}
//Window Procedure

LRESULT CALLBACK WndProc (HWND hWnd, UINT message,
                          WPARAM wParam, LPARAM lParam)
{

    switch (message)
    {
    case WM_CREATE:
        return 0;
    case WM_CLOSE:
        PostQuitMessage (0);
        return 0;

    case WM_DESTROY:
        return 0;

    case WM_KEYDOWN:
        switch (wParam)
        {
        case VK_ESCAPE:
            PostQuitMessage(0);
            return 0;
        }
        return 0;

    default:
        return DefWindowProc (hWnd, message, wParam, lParam);
    }
}
//Enable OpenGL

void EnableOpenGL (HWND hWnd, HDC *hDC, HGLRC *hRC)
{
    PIXELFORMATDESCRIPTOR pfd;
    int iFormat;

    //get the device context (DC)
    *hDC = GetDC (hWnd);

    //set the pixel format for the DC
    ZeroMemory (&pfd, sizeof (pfd));
    pfd.nSize = sizeof (pfd);
    pfd.nVersion = 1;
    pfd.dwFlags = PFD_DRAW_TO_WINDOW | 
      PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
    pfd.iPixelType = PFD_TYPE_RGBA;
    pfd.cColorBits = 24;
    pfd.cDepthBits = 16;
    pfd.iLayerType = PFD_MAIN_PLANE;
    iFormat = ChoosePixelFormat (*hDC, &pfd);
    SetPixelFormat (*hDC, iFormat, &pfd);

    // create and enable the render context (RC) 
    *hRC = wglCreateContext( *hDC );
    wglMakeCurrent( *hDC, *hRC );

}
// Disable OpenGL

void DisableOpenGL (HWND hWnd, HDC hDC, HGLRC hRC)
{
    wglMakeCurrent (NULL, NULL);
    wglDeleteContext (hRC);
    ReleaseDC (hWnd, hDC);
}
